{"version":3,"file":"static/js/134.9203a200.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAS,mCAAG,oGACAC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFrB,cACjBG,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAU,mCAAG,WAAMC,GAAN,uFACDJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAO,EADA,oBACmBN,IAFlB,cAClBG,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAMVG,EAAU,mCAAG,WAAMD,GAAN,uFACDJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAO,EADA,4BAC2BN,IAF1B,cAClBG,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAMVI,EAAU,mCAAG,WAAMF,GAAN,uFACDJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAO,EADA,4BAC2BN,EAD3B,YADC,cAClBG,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAOVK,EAAS,mCAAG,WAAMC,GAAN,uFACAR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCU,EADhC,yBADA,cACjBP,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qD,oFC5BTO,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAMG,KAAI,SAAAH,GAAK,OACd,yBACE,UAAC,KAAD,CAASI,GAAE,kBAAaJ,EAAMK,IAAMC,MAAO,CAAEC,KAAMN,GAAnD,WACE,gBACEO,IACER,EAAMS,YAAN,yCACsCT,EAAMS,aACxC,oNAENC,IAAKV,EAAMW,SAEb,uBAAIX,EAAMW,YAVLX,EAAMK,GADD,KAiBrB,C,8ICnBc,SAASO,IACtB,OAAoCC,EAAAA,EAAAA,MAApC,eAAOf,EAAP,KAAmBgB,EAAnB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAQ1B,EAAW2B,IAAI,WAE7BC,EAAAA,EAAAA,YAAU,WACHF,IAGLH,GAAa,IACbxB,EAAAA,EAAAA,IAAU2B,GACPG,MAAK,SAAAnC,GACJyB,GAAU,OAAIzB,EAAKoC,SACpB,IACAC,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAb,IACXQ,QAAQT,GAAa,IACzB,GAAE,CAACG,IAiBJ,OACE,gCACGF,IAAS,oCACV,kBAAMS,SAdW,SAAAC,GAEnB,GADAA,EAAMC,iBACe,KAAjBf,EAAMgB,OACR,OAAOC,MAAM,qBAEXjB,EAAMgB,SAAWV,IACnBP,EAAU,IACVH,EAAc,CAAEsB,OAAQlB,EAAMgB,SAEjC,EAKG,WACE,kBAAOG,QAAQ,GAAf,UACE,kBACEC,KAAK,OACLC,KAAK,aACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOzB,EACP0B,SA3Be,SAAAZ,GACvBb,EAASa,EAAMa,OAAOF,MACvB,OA4BK,mBAAQL,KAAK,SAAb,uBAGDlB,IAAa,SAAC,IAAD,KACd,SAAC,IAAD,CAAWpB,MAAOgB,MAGvB,C","sources":["API/api.jsx","components/MovieList/MovieList.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst MAIN_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ced4c166bd9d448eb708ac1c947ec551';\n\nexport const getTrends = async () => {\n  const response = await axios.get(\n    `${MAIN_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\nexport const getCredits = async movieId => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovies = async searchData => {\n  const response = await axios.get(\n    `${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${searchData}&include_adult=false`\n  );\n  return response.data;\n};\n","import PropTypes from 'prop-types';\nimport { useLocation, NavLink } from 'react-router-dom';\n\nexport const MovieList = ({ movie }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movie.map(movie => (\n        <li key={movie.id}>\n          <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/w200${movie.poster_path}`\n                  : 'https://media.istockphoto.com/id/1357365823/vector/default-image-icon-vector-missing-picture-page-for-website-design-or-mobile-app-no-photo.jpg?s=612x612&w=0&k=20&c=PM_optEhHBTZkuJQLlCjLz-v3zzxp-1mpNQZsdjrbns='\n              }\n              alt={movie.title}\n            />\n            <p>{movie.title}</p>\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovies } from 'API/api';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Movies() {\n  const [searchData, setSearchData] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const query = searchData.get('search');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    setIsLoading(true);\n    getMovies(query)\n      .then(data => {\n        setMovies([...data.results]);\n      })\n      .catch(error => setError(error))\n      .finally(setIsLoading(false));\n  }, [query]);\n\n  const handleNameChange = event => {\n    setInput(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (input.trim() === '') {\n      return alert('Input search data');\n    }\n    if (input.trim() !== query) {\n      setMovies([]);\n      setSearchData({ search: input.trim() });\n    }\n  };\n\n  return (\n    <>\n      {error && <h1>Error!</h1>}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"\">\n          <input\n            type=\"text\"\n            name=\"searchData\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            value={input}\n            onChange={handleNameChange}\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isLoading && <Loader />}\n      <MovieList movie={movies} />\n    </>\n  );\n}\n"],"names":["MAIN_URL","API_KEY","getTrends","axios","response","data","getDetails","movieId","getCredits","getReviews","getMovies","searchData","MovieList","movie","location","useLocation","map","to","id","state","from","src","poster_path","alt","title","Movies","useSearchParams","setSearchData","useState","movies","setMovies","input","setInput","isLoading","setIsLoading","error","setError","query","get","useEffect","then","results","catch","finally","onSubmit","event","preventDefault","trim","alert","search","htmlFor","type","name","autoComplete","autoFocus","placeholder","value","onChange","target"],"sourceRoot":""}